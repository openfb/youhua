应用调优 


一、MySQL

	调MySQL内部变量 	/etc/my.cnf 
	
	查看所有变量：
		> show global variables;

	查看变量的值：
	
		> select @@datadir;

	模糊查询
	
		> show global variables like "%log%";

	
日志相关：

	1) 二进制日志 
	
		log_bin 
		binlog_cache_size		二进制日志缓存大小 
		sql_log_bin	
			在做数据库恢复时，为避免二进制日志文件中记录重复的操作，可以暂停二进制日志
			MariaDB [(none)]> set sql_log_bin=OFF; 
			
	2) 错误日志

		log-error 
		
	3) 慢查询日志
	
		slow_query_log			启用慢查询日志 select 
		slow_query_log_file		指定慢查询日志文件 
		long_query_time     	慢查询的时间 


缓存、缓冲相关：

	1) table_open_cache = 128MB
		
		打开数据表时的缓存区大小 

	2) thread_cache_size 
	
		进程重用时，用于保存空闲进程的缓存区大小 
		
	3) query_cache_size
	
		用于设置查询缓存区大小，增加select查询效率 
		
		重要的方式： 在合适的字段建立索引 
		
		
	4) query_cache_limit
	
		用于设置单个查询语句所能使用的缓存区大小 
	
	5) innodb_buffer_pool_size
	
		设置innodb存储引擎时，保存数据时使用的缓冲区大小 
	
	6) innodb_log_buffer_size
	
		设置innodb存储引擎时，保存日志数据时使用的缓冲区大小 
	
	7)
		innodb_write_io_threads = 4
		innodb_read_io_threads = 4
		
		设置innodb存储引擎时，处理读写请求的线程数 
		
	8) wait_timeout = 10
	
		服务器关闭非交互连接之前等待活动的秒数

其他：

	1) skip-name-resolve=ON 
	
		禁止主机名反解 
		
	2) max_connections = 1000
	
		MySQL数据库最大连接数 
		
	3) open_files_limit = 65535		
		
		MySQL的最大文件描述符数量 
		

		
		
		
二、Nginx 


	1) worker_processes  1; 
		启动的子进程数量, CPU数量一致；2倍
	
	2) worker_cpu_affinity auto; 
		设置nginx进程与CPU绑定
		
	3) 事件驱动模型 
	
		use epoll;
		worker_connections 1024;   每个进程所能接收最大连接数 
		
	4) 开启nginx高效传输
	
		sendfile on;
		tcpnopush on; 
		
	5) 长连接
	
		keepalive_timeout 65;		长连接的超时时间
		keepalive_requests 100; 	长连接的最大请求数 
		
	6) 启用压缩功能   CDN 
	
		gzip on; 
		
		
	7)  client_header_buffer_size 4k;
	
		nginx读取客户端HTTP请求头的大小；默认1k 
		
	8) nginx作为反向代理时，超时时间
	
		proxy_connect_timeout			nginx向后端服务器等待建立连接的超时时间; 单位s 
		proxy_read_timeout <time>		nginx向后端服务器发送read请求时等待的超时时间; 单位s 
		proxy_send_timeout <time>		nginx向后端服务器发送write请求时等待的超时时间; 单位s
		
	
	9) proxy_buffer <number> <size>
		
	   proxy_buffer 8 4k; 

	   该指令用于配置接收一次后端服务器的响应数据的proxy buffer的个数和每个buffer的大小
		
		
	10) proxy_buffer_size <size>
	
		proxy_buffer_size 8k; 
		
		该指令用于配置从后端服务器获取的HTTP响应头的数据大小 
		
		
	11) 设置反向代理缓存 
	
		proxy_cache_path /nginx/cache/ levels=1:2 keys_zone=a:10m;
		proxy_cache_valid 200 302 2m;
		
		
	12) fastcgi_buffer_size 4k|8k;

		设置nginx从后端fastcgi服务器读取响应头的缓冲区大小；按内存页大小修改 
		
		
	13) fastcgi_buffers 8  4k|8k;
	
		设置nginx从后端fastcgi服务器读取响应数据的缓冲区大小；
		
	14) fastcgi_connect_timeout time;
	
		设置与后端FastCGI服务器建立连接的超时时间；单位s   
		
		
	
三、php-fpm  

	安装目录/conf/php-fpm.conf 
	/etc/php.ini 

	
	1) pm = dynamic 
		设置php-fpm以动态方式工作
	
	2) pm.max_children = 512
		设置php可以启动的最大进程数
	
	3) pm.start_servers = 128
		设置php启动时，默认启动的进程数
	
	4) pm.min_spare_servers = 64
		设置php最小空闲进程数
	
	5) pm.max_spare_servers = 256
		设置php最大空闲进程数 
		
	6) pm.max_requests = 50000
		每个进程所能接收最大连接数
		
	
		
四、redis

	1) tcp-backlog 511  调整到800-1000
		
		设置redis接收访问请求队列长度
	
	2) timeout 0   调整为5
		
		设置redis断开客户端连接的空闲超时时间
	
	3) tcp-keepalive 0  调整为60
	
		设置长连接的超时时间
	
	4)
	   logfile ""	 调整为 "/var/log/redis.log"
	   loglevel

	5) slowlog-log-slower-than 10000
	
		慢查询超时时间
	
	6) session.gc_maxlifetime=3600
	
		当会话超过指定时间后，redis启动垃圾回收机制回收数据 
	
	7) appendonly yes
	
		启用aof日志做数据的持久保存
		
		redis持久保存：
			数据文件   .rdb 
			日志文件   aof日志
	
	8) maxclient 10000
		
		设置最大连接数
		
	9) maxmemory  8192
	
		允许redis使用的最大内存
		
		最大内存的过期策略
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	


	
	
	
	
	
	
	
	
	
	






